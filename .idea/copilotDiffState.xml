<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/checkout/controllers/CheckoutController.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/checkout/controllers/CheckoutController.js" />
              <option name="originalContent" value="const CheckoutService = require('../services/CheckoutService');&#10;const { sendSuccessResponse, sendErrorResponse } = require('../../utils/respondHandler');&#10;&#10;class CheckoutController {&#10;&#10;    static async createCheckout(req, res) {&#10;        try {&#10;            const userId = req.user.id;&#10;            const checkoutDetails = req.body;&#10;&#10;            const checkout = await CheckoutService.createCheckout(userId, checkoutDetails);&#10;&#10;            if (checkout.paymentUrl) {&#10;                return sendSuccessResponse(res, {&#10;                    message: 'Checkout created. Complete the payment using the provided URL.',&#10;                    checkout: checkout.checkout,&#10;                    paymentUrl: checkout.paymentUrl,&#10;                });&#10;            }&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkout created successfully.',&#10;                checkout,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to create checkout.' });&#10;        }&#10;    }&#10;&#10;    static async handlePaymentWebhook(req, res) {&#10;        try {&#10;            const { data } = req.body;&#10;            const { reference, status } = data;&#10;&#10;            if (!reference || !status) {&#10;                throw new Error('Invalid webhook payload: Missing reference or status');&#10;            }&#10;&#10;            await CheckoutService.handlePaymentWebhook(reference, { status });&#10;&#10;            sendSuccessResponse(res, { message: 'Payment webhook handled successfully.' });&#10;        } catch (error) {&#10;            console.error('Error handling payment webhook:', error.message);&#10;            sendErrorResponse(res, { message: error.message || 'Failed to handle payment webhook.' });&#10;        }&#10;    }&#10;&#10;    static async getCheckouts(req, res) {&#10;        try {&#10;            const checkouts = await CheckoutService.getCheckouts();&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkouts retrieved successfully.',&#10;                checkouts,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to retrieve checkouts.' });&#10;        }&#10;    }&#10;&#10;    static async getUserCheckouts(req, res) {&#10;        try {&#10;            const userId = req.user.id;&#10;            const checkouts = await CheckoutService.getUserCheckouts(userId);&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'User checkouts retrieved successfully.',&#10;                checkouts,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to retrieve user checkouts.' });&#10;        }&#10;    }&#10;&#10;    static async updatePaymentStatus(req, res) {&#10;        try {&#10;            const { checkoutId } = req.params;&#10;            const { paymentStatus } = req.body;&#10;&#10;            const updatedCheckout = await CheckoutService.updatePaymentStatus(checkoutId, paymentStatus);&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Payment status updated successfully.',&#10;                checkout: updatedCheckout,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to update payment status.' });&#10;        }&#10;    }&#10;&#10;    static async getCheckoutById(req, res) {&#10;        try {&#10;            const { checkoutId } = req.params;&#10;            const checkout = await CheckoutService.getCheckoutById(checkoutId);&#10;&#10;            if (!checkout) {&#10;                return sendErrorResponse(res, { message: 'Checkout not found' }, 404);&#10;            }&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkout retrieved successfully.',&#10;                checkout,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to retrieve checkout.' });&#10;        }&#10;    }&#10;&#10;    static async cancelCheckout(req, res) {&#10;        try {&#10;            const { checkoutId } = req.params;&#10;            const result = await CheckoutService.cancelCheckout(checkoutId);&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkout canceled successfully.',&#10;                checkout: result,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to cancel checkout.' });&#10;        }&#10;    }&#10;&#10;    static async getCheckoutStatus(req, res) {&#10;        try {&#10;            const { checkoutId } = req.params;&#10;            const checkout = await CheckoutService.getCheckoutById(checkoutId);&#10;&#10;            if (!checkout) {&#10;                return sendErrorResponse(res, { message: 'Checkout not found' }, 404);&#10;            }&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkout status retrieved successfully.',&#10;                status: checkout.deliveryStatus,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to retrieve checkout status.' });&#10;        }&#10;    }&#10;&#10;    static async updateDeliveryStatus(req, res) {&#10;        try {&#10;            const { checkoutId } = req.params;&#10;            const { deliveryStatus } = req.body;&#10;&#10;            const updatedCheckout = await CheckoutService.updateDeliveryStatus(checkoutId, deliveryStatus);&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Delivery status updated successfully.',&#10;                checkout: updatedCheckout,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to update delivery status.' });&#10;        }&#10;    }&#10;&#10;    static async searchCheckouts(req, res) {&#10;        try {&#10;            const results = await CheckoutService.searchCheckouts(req.query);&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkouts search successful.',&#10;                results,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Search failed.' });&#10;        }&#10;    }&#10;    static async getDeliveredOrders(req, res) {&#10;        try {&#10;            const userId = req.user.id;&#10;            const deliveredOrders = await CheckoutService.getDeliveredOrders(userId);&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Delivered orders retrieved successfully.',&#10;                deliveredOrders&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to retrieve delivered orders.' });&#10;        }&#10;    }&#10;&#10;    static async adminUpdateCheckoutAddress(req, res) {&#10;        try {&#10;            const { checkoutId } = req.params;&#10;            const newAddress = req.body;&#10;            const adminUser = req.user;&#10;            const updatedCheckout = await CheckoutService.adminUpdateCheckoutAddress(checkoutId, newAddress, adminUser);&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkout address updated successfully.',&#10;                checkout: updatedCheckout,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to update checkout address.' });&#10;        }&#10;    }&#10;}&#10;&#10;module.exports = CheckoutController;" />
              <option name="updatedContent" value="const CheckoutService = require('../services/CheckoutService');&#10;const { sendSuccessResponse, sendErrorResponse } = require('../../utils/respondHandler');&#10;&#10;class CheckoutController {&#10;&#10;    static async createCheckout(req, res) {&#10;        try {&#10;            const userId = req.user.id;&#10;            const checkoutDetails = req.body;&#10;&#10;            const checkout = await CheckoutService.createCheckout(userId, checkoutDetails);&#10;&#10;            if (checkout.paymentUrl) {&#10;                return sendSuccessResponse(res, {&#10;                    message: 'Checkout created. Complete the payment using the provided URL.',&#10;                    checkout: checkout.checkout,&#10;                    paymentUrl: checkout.paymentUrl,&#10;                });&#10;            }&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkout created successfully.',&#10;                checkout,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to create checkout.' });&#10;        }&#10;    }&#10;&#10;    static async handlePaymentWebhook(req, res) {&#10;        try {&#10;            const { data } = req.body;&#10;            const { reference, status } = data;&#10;&#10;            if (!reference || !status) {&#10;                throw new Error('Invalid webhook payload: Missing reference or status');&#10;            }&#10;&#10;            await CheckoutService.handlePaymentWebhook(reference, { status });&#10;&#10;            sendSuccessResponse(res, { message: 'Payment webhook handled successfully.' });&#10;        } catch (error) {&#10;            console.error('Error handling payment webhook:', error.message);&#10;            sendErrorResponse(res, { message: error.message || 'Failed to handle payment webhook.' });&#10;        }&#10;    }&#10;&#10;    static async getCheckouts(req, res) {&#10;        try {&#10;            const checkouts = await CheckoutService.getCheckouts();&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkouts retrieved successfully.',&#10;                checkouts,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to retrieve checkouts.' });&#10;        }&#10;    }&#10;&#10;    static async getUserCheckouts(req, res) {&#10;        try {&#10;            const userId = req.user.id;&#10;            const checkouts = await CheckoutService.getUserCheckouts(userId);&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'User checkouts retrieved successfully.',&#10;                checkouts,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to retrieve user checkouts.' });&#10;        }&#10;    }&#10;&#10;    static async updatePaymentStatus(req, res) {&#10;        try {&#10;            const { checkoutId } = req.params;&#10;            const { paymentStatus } = req.body;&#10;&#10;            const updatedCheckout = await CheckoutService.updatePaymentStatus(checkoutId, paymentStatus);&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Payment status updated successfully.',&#10;                checkout: updatedCheckout,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to update payment status.' });&#10;        }&#10;    }&#10;&#10;    static async getCheckoutById(req, res) {&#10;        try {&#10;            const { checkoutId } = req.params;&#10;            const checkout = await CheckoutService.getCheckoutById(checkoutId);&#10;&#10;            if (!checkout) {&#10;                return sendErrorResponse(res, { message: 'Checkout not found' }, 404);&#10;            }&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkout retrieved successfully.',&#10;                checkout,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to retrieve checkout.' });&#10;        }&#10;    }&#10;&#10;    static async cancelCheckout(req, res) {&#10;        try {&#10;            const { checkoutId } = req.params;&#10;            const result = await CheckoutService.cancelCheckout(checkoutId);&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkout canceled successfully.',&#10;                checkout: result,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to cancel checkout.' });&#10;        }&#10;    }&#10;&#10;    static async getCheckoutStatus(req, res) {&#10;        try {&#10;            const { checkoutId } = req.params;&#10;            const checkout = await CheckoutService.getCheckoutById(checkoutId);&#10;&#10;            if (!checkout) {&#10;                return sendErrorResponse(res, { message: 'Checkout not found' }, 404);&#10;            }&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkout status retrieved successfully.',&#10;                status: checkout.deliveryStatus,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to retrieve checkout status.' });&#10;        }&#10;    }&#10;&#10;    static async updateDeliveryStatus(req, res) {&#10;        try {&#10;            const { checkoutId } = req.params;&#10;            const { deliveryStatus } = req.body;&#10;&#10;            const updatedCheckout = await CheckoutService.updateDeliveryStatus(checkoutId, deliveryStatus);&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Delivery status updated successfully.',&#10;                checkout: updatedCheckout,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to update delivery status.' });&#10;        }&#10;    }&#10;&#10;    static async searchCheckouts(req, res) {&#10;        try {&#10;            const results = await CheckoutService.searchCheckouts(req.query);&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkouts search successful.',&#10;                results,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Search failed.' });&#10;        }&#10;    }&#10;    static async getDeliveredOrders(req, res) {&#10;        try {&#10;            const userId = req.user.id;&#10;            const deliveredOrders = await CheckoutService.getDeliveredOrders(userId);&#10;&#10;            sendSuccessResponse(res, {&#10;                message: 'Delivered orders retrieved successfully.',&#10;                deliveredOrders&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to retrieve delivered orders.' });&#10;        }&#10;    }&#10;&#10;    static async adminUpdateCheckoutAddress(req, res) {&#10;        try {&#10;            const { checkoutId } = req.params;&#10;            const newAddress = req.body;&#10;            const adminUser = req.user;&#10;            const updatedCheckout = await CheckoutService.adminUpdateCheckoutAddress(checkoutId, newAddress, adminUser);&#10;            sendSuccessResponse(res, {&#10;                message: 'Checkout address updated successfully.',&#10;                checkout: updatedCheckout,&#10;            });&#10;        } catch (error) {&#10;            sendErrorResponse(res, { message: error.message || 'Failed to update checkout address.' });&#10;        }&#10;    }&#10;}&#10;&#10;module.exports = CheckoutController;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>